package com.mgtriffid.games.cotta.server.impl

import com.mgtriffid.games.cotta.core.CottaEngine
import com.mgtriffid.games.cotta.core.CottaGame
import com.mgtriffid.games.cotta.core.ServerInputProvider
import com.mgtriffid.games.cotta.core.TICK_LENGTH
import com.mgtriffid.games.cotta.core.entities.EntityId
import com.mgtriffid.games.cotta.core.entities.InputComponent
import com.mgtriffid.games.cotta.core.entities.TickProvider
import com.mgtriffid.games.cotta.core.entities.impl.CottaStateImpl
import com.mgtriffid.games.cotta.core.loop.impl.FixedRateLoopBody
import com.mgtriffid.games.cotta.core.serialization.DeltaRecipe
import com.mgtriffid.games.cotta.core.serialization.InputRecipe
import com.mgtriffid.games.cotta.core.serialization.StateRecipe
import com.mgtriffid.games.cotta.core.systems.CottaSystem
import com.mgtriffid.games.cotta.network.CottaServerNetwork
import com.mgtriffid.games.cotta.server.ClientsInput
import com.mgtriffid.games.cotta.server.CottaGameInstance
import com.mgtriffid.games.cotta.server.DataForClients
import com.mgtriffid.games.cotta.server.IncomingInput
import com.mgtriffid.games.cotta.server.ServerSimulation
import com.mgtriffid.games.cotta.server.ServerToClientDataChannel
import mu.KotlinLogging
import kotlin.reflect.KClass

private val logger = KotlinLogging.logger {}

class CottaGameInstanceImpl<SR: StateRecipe, DR: DeltaRecipe, IR: InputRecipe>(
    val game: CottaGame,
    val engine: CottaEngine<SR, DR, IR>,
    val network: CottaServerNetwork,
    val clientsInput: ClientsInput,
    val clientsGhosts: ClientsGhosts,
): CottaGameInstance {
    private val historyLength = 8
    @Volatile var running = true
    private val tickProvider = TickProvider.getInstance()
    private val state = CottaStateImpl(historyLength, tickProvider)
    private val serverSimulation = ServerSimulation.getInstance(tickProvider, historyLength)

    private val serverInputProvider = game.serverInputProvider

    // should be generated by network? Yes, probably.
    private val serverToClientDataChannel = ServerToClientDataChannel.getInstance(
        tickProvider = tickProvider,
        clientsGhosts = clientsGhosts,
        network = network,
        stateSnapper = engine.getStateSnapper(),
        snapsSerialization = engine.getSnapsSerialization(),
        inputSnapper = engine.getInputSnapper(),
        inputSerialization = engine.getInputSerialization()
    )

    override fun run() {
        network.initialize()
        registerComponents()
        initializeState()
        registerSystems()
        val loop = FixedRateLoopBody(
            tickLengthMs = TICK_LENGTH,
            startsAt = System.currentTimeMillis()
        ) {
            tick()
        }
        loop.start()
    }

    // TODO probably this is wrong place
    private fun registerComponents() {
        game.componentClasses.forEach {
            engine.getComponentsRegistry().registerComponentClass(it)
        }
        game.inputComponentClasses.forEach {
            engine.getComponentsRegistry().registerInputComponentClass(it)
        }
        serverSimulation.setMetaEntitiesInputComponents(game.metaEntitiesInputComponents)
    }

    private fun initializeState() {
        game.initializeServerState(state)
        serverSimulation.setState(state)
    }

    private fun registerSystems() {
        game.serverSystems.forEach { serverSimulation.registerSystem(it as KClass<CottaSystem>) }
    }

    private fun tick() {
        logger.debug { "Tick is happening" }
        fetchInput()
        simulate()
        // simulation after fetching input
        // effects after simulation
        // no actually effects within simulation, they are effects FFS
        dispatchDataToClients()
    }

    private fun fetchInput() {
        val intents = network.drainEnterGameIntents()
        logger.trace { "intents.size == ${intents.size}" }
        intents.forEach {
            logger.trace { "Received an intent to enter the game" }
            val playerId = serverSimulation.enterGame(it.second)
            clientsGhosts.addGhost(playerId, it.first)
        }
        val input = fetchIncomingInput()
        serverSimulation.setInputForUpcomingTick(input)
    }

    private fun fetchIncomingInput(): IncomingInput {
        val clientsOwnedEntitiesInput = clientsInput.getInput()

        val serverOwnedEntitiesInput = serverInputProvider.input(state.entities())

        val inputs = clientsOwnedEntitiesInput + serverOwnedEntitiesInput

        logger.trace { "Incoming input has ${inputs.size} entries" }

        inputs.forEach { (eId, components) ->
            logger.trace { "Inputs for entity $eId:" }
            components.forEach { logger.trace { it } }
        }

        return object: IncomingInput {
            // TODO protect against malicious client sending input for entity not belonging to them
            override fun inputsForEntities(): Map<EntityId, Collection<InputComponent<*>>> {
                return inputs
            }
        }
    }

    private fun simulate() {
        serverSimulation.tick()
    }

    private fun dispatchDataToClients() {
        logger.debug { "Preparing data to send to clients" }
        /*
          TODO consider passing tick as a parameter here because it's confusing right now:
            tick goes through EVERYTHING but implicitly
         */
        val data = serverSimulation.getDataToBeSentToClients()
        send(data)
    }

    private fun send(data: DataForClients) {
        serverToClientDataChannel.send(data)
    }
}
